(defwidget metric-cpu []
  (box :class "metric metric-cpu"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (label :class "metric-icon"
           :text "CPU")
    (for core in "${EWW_CPU.cores}"
      (progress
        :value "${core.usage}"
        :width 28
        :orientation "h"))))

(defwidget metric-gpu []
  (box :class "metric metric-gpu"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (for gpu in "${gpu_stats}"
      (box
           :orientation "v"
           :space-evenly false
           :valign "fill"
           :vexpand false
        (label :class "metric-icon"
               :text "GPU")
        (progress
          :value "${gpu.usage}"
          :width 28
          :orientation "h"
        )
        (progress
          :value "${(100 * gpu.memory_used)/gpu.memory_total}"
          :width 28
          :orientation "h")))))

(defwidget metric-ram []
  (box :class "metric metric-ram"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (label :class "metric-icon"
           :text "MEM")
    (progress
      :value "${EWW_RAM.used_mem_perc}"
      :width 28
      :orientation "h"
      :tooltip "${round(EWW_RAM.used_mem / 1024 / 1024 / 1024, 1)} / ${round(EWW_RAM.total_mem / 1024 / 1024 / 1024, 1)} GB")))

(defwidget metric-disk []
  (box :class "metric metric-disk"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (label :class "metric-icon"
           :text "DISK")
    (for disk in DISKS
      (progress
        :value "${EWW_DISK[disk].used_perc}"
        :width 28
        :orientation "h"
        :tooltip "${disk} - ${round(EWW_DISK[disk].used / 1024 / 1024 / 1024, 0)} / ${round(EWW_DISK[disk].total / 1024 / 1024 / 1024, 0)} GB"))))

(defwidget metric-net []
  (eventbox :onclick "hyprctl dispatch exec [floating] nm-connection-editor"
    (box :class "metric metric-net"
         :orientation "v"
         :space-evenly false
         :valign "fill"
         :vexpand false
      (label :class "metric-icon"
             :text "NET")
      (label :class "metric-text"
             :text "${(EWW_NET[NETIF].NET_UP > 0) ? ((EWW_NET[NETIF].NET_DOWN > 0) ? "↕" : "↑") : ((EWW_NET[NETIF].NET_DOWN > 0) ? "↓" : "-")}"
             :tooltip "↑ ${EWW_NET[NETIF].NET_UP} ↓ ${EWW_NET[NETIF].NET_DOWN}"))))

(defwidget time []
  (box :orientation "v"
       :class "time"
    hour min sec))

(defwidget volume []
  (eventbox :onclick "hyprctl dispatch exec [floating] pavucontrol"
    (box :class "metric metric-volume"
         :orientation "v"
         :space-evenly false
         :valign "fill"
         :vexpand false
      (label :class "metric-icon"
             :text "")
      (progress
             :class "${volume_mute ? "inactive" : ""}"
             :orientation "h"
             :width 28
             :value "${volume}"))))

(defwidget player []
  (tooltip
    (box :class "player tooltip"
         :orientation "v"
         :space-evenly false
         :valign "fill"
         :vexpand false
      (image :path "${player_art}"
             :image-width 128
             :image-height 128)
      (label :text "${player_metadata.title}")
      (label :text "${player_metadata.album}")
      (progress :class "${player_metadata.status == "Playing" ? "" : "inactive"}"
                :value "${100*player_metadata.progress}"
                :width 128
                :orientation "h")
      (label :text "${player_metadata.time}"))
    (box :class "player"
         :orientation "v"
         :space-evenly false
         :valign "fill"
         :vexpand false
      (image :path "${player_art}"
             :image-width 28
             :image-height 28)
      (progress :class "${player_metadata.status == "Playing" ? "" : "inactive"}"
                :value "${100*player_metadata.progress}"
                :width 28
                :orientation "h"))))

(defwidget kb-layout []
  (eventbox :onclick "hyprctl switchxkblayout \"${KEYBOARD}\" next"
    (label :text "${kb_layout == "\"Polish\"" ? "PL" : "EN"}")))

(defwidget date []
  (tooltip :halign "center"
    (calendar :day {formattime(EWW_TIME, "%d")}
              :month {formattime(EWW_TIME, "%m")}
              :year {formattime(EWW_TIME, "%Y")})
    (box :orientation "v"
      day_word day month year)))

(defwidget workspaces [screen]
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace[screen]}"
            :class "workspaces-widget"
    (box :orientation "v"
         :space-evenly true
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace[screen] ? "current" : ""} ${workspace.windows > 0 ? (workspace.display == screen ? "occupied" : "occupied_diff_disp") : "empty"}"
            (label :text "${workspace.id == current_workspace[screen] ? icon_workspace_active : workspace.windows > 0 ? (workspace.display == screen ? icon_workspace_occupied : icon_workspace_occupied_diff_disp) : icon_workspace_empty}")))))))
